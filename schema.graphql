scalar Date

input SupplyPointInput {
    supplierId: ID!
    name: String!
    address: AddressInput!
    powerAttributes: SupplyPointInputPowerAttributes
    gasAtttributes: SupplyPointInputGasAttributes
    expirationDate: Date
    subjectTypeId: String!
    contractEndTypeId: String!
    timeToContractEnd: Int
    timeToContractEndPeriodId: String
}


input SupplyPointInputGasAttributesImport {
    eic: String!
    annualConsumption: Float
    annualConsumptionUnit: String
}

input SupplyPointInputPowerAttributesImport {
    ean: String!
    circuitBreakerId: String
    phasesId: String
    distributionRateId: String
    annualConsumptionNT: Float
    annualConsumptionNTUnit: String
    annualConsumptionVT: Float
    annualConsumptionVTUnit: String
}

input AddressInputImport {
    region: String
    street: String
    orientationNumber: String
    descriptiveNumber: String
    city: String
    postCode: String
}

input SupplyPointInputGasAttributes {
    eic: String!
    annualConsumption: Float!
    annualConsumptionUnit: String!
}

input SupplyPointInputPowerAttributes {
    ean: String!
    circuitBreakerId: String!
    phasesId: String!
    distributionRateId: String!
    annualConsumptionNT: Float
    annualConsumptionNTUnit: String
    annualConsumptionVT: Float!
    annualConsumptionVTUnit: String!
}

input SupplyPointUpdate{
    name: String!
}

input SupplyPointUpdatePowerAttributes{
    annualConsumptionNT: Float
    annualConsumptionNTUnit: String
    annualConsumptionVT: Float!
    annualConsumptionVTUnit: String!
}

input SupplyPointUpdateGasAttributes{
    annualConsumption: Float!
    annualConsumptionUnit: String!
}

type SupplyPoint {
    id: ID!
    name: String
    commodityType: CommodityType
    supplier: Supplier
    identificationNumber: String
    address: Address
    distributionRate: CodelistItem
    circuitBreaker: CodelistItem
    phases: CodelistItem
    annualConsumptionNT: Float
    annualConsumptionNTUnit: String
    annualConsumptionVT: Float
    annualConsumptionVTUnit: String
    annualConsumption: Float
    annualConsumptionUnit: String
    expirationDate: Date
    subject: CodelistItem!
    lastAnnualConsumptionNT: Float
    lastAnnualConsumptionVT: Float
    lastAnnualConsumption: Float
    contractEndType: CodelistItem
    timeToContractEnd: Int
    timeToContractEndPeriod: CodelistItem
    contract: ContractResponseDto,
    progressStatus: ProgressStatus
    lastVersionOfSupplyPoint: Boolean
    allowedOperations: [AllowedOperations!]
    imported: Boolean
    importPricePerKwPowerVT: Float
    importPricePerKwPowerNT: Float
    importPricePerKwGas: Float
    importPriceTotalPerYear: Float
    importPermanentMonthyPay: Float
}

enum ProgressStatus {
    SUPPLY_POINT
    OFFER_STEP
    PERSONAL_DATA
    READY_FOR_SIGN
    WAITING_FOR_PAYMENT
}

enum AllowedOperations{
    TERMINATE_CONTRACT,
    LEAVE_CONTRACT,
    PARTIAL_EDIT,
    SHOW_DELIVERY_TO,
    UNSET_AUTOMATIC_PROLONGATION
}

enum ContractDeleteReason{
    LEAVING,
    TERMINATION
}

type Supplier {
    id: ID!
    name: String!
    vatNumber: String
    logoPath: String
    sampleDocuments: [SupplierSampleDocument]
}

type Address {
    region: String!
    street: String!
    orientationNumber: String
    descriptiveNumber: String!
    city: String!
    postCode: String!
}

input AddressInput {
    region: String!
    street: String!
    orientationNumber: String
    descriptiveNumber: String!
    city: String!
    postCode: String!
}

type SupplierSampleDocument {
    type: String
    url: String
    commodityType: CommodityType!
}

enum CommodityType {
    POWER
    GAS
}

type CodelistMap {
    codelistType: String!
    codelistItems: [CodelistItem]!
}

type CodelistItem {
    type: String!
    code: String!
    description: String
    help: String
}

input OfferInput {
    name: String!
    supplierId: ID
    validFrom: Date!
    validTo: Date!
    deliveryFrom: Date!
    deliveryTo: Date!
    deliveryLength: Int!
    distributionLocation: String!
    permanentPaymentPrice: Float!
    subjectTypeId: String!
    benefits: String
    powerAttributes: OfferInputPowerAttributes
    gasAttributes: OfferInputGasAttributes
    greenEnergy: Boolean!
}


input OfferInputPowerAttributes {
    priceVT: Float!
    priceNT: Float
    distributionRateId: String!
    circuitBreakerId: String!
}

input OfferInputGasAttributes {
    priceGas: Float!
    annualConsumptionId: String!
}


type ContractTerms{
    content: String
}

type Offer {
    id: ID!
    supplier: Supplier
    status: OfferStatus
    commodityType: CommodityType!
    name: String!
    validFrom: Date!
    validTo: Date!
    deliveryFrom: Date
    deliveryTo: Date
    deliveryLength: Int!
    greenEnergy: Boolean!
    distributionLocation: CodelistItem
    permanentPaymentPrice: Float
    subject: CodelistItem
    benefits: String
    priceVT: Float
    priceNT: Float
    distributionRate: CodelistItem
    circuitBreaker: CodelistItem
    priceGas: Float
    annualConsumption: CodelistItem
    priceVTWithVAT: Float
    priceNTWithVAT: Float
    priceGasWithVAT: Float
    consumptionPriceVT: Float
    consumptionPriceNT: Float
    consumptionPriceGas: Float
    distributionPriceByCapacity: Float
    distributionPriceByConsumptionVT: Float
    distributionPriceByConsumptionNT: Float
    distributionPriceByConsumptionGas: Float
    systemServicesRegulatedPrice: Float
    renewableEnergyRegulatedPrice: Float
    marketOrganizerRegulatedPrice: Float
    energyTaxRegulatedPrice: Float
    totalPrice: Float
    monthlyConsumptionFee: Float
    accountingRegulatedPrice: Float
    unit: String,
    prepayment: Float
}

enum OfferStatus {
    ACTIVE
    DELETED
}

input PersonalDataInput {
    name: String!
    ico: String
    dic: String
    address1: AddressInput!
    address2: AddressInput
    birthDate: Date
    email: String!
    phone: String!
    bankAccountNumber: String!
    bankCode: String!
    depositPaymentTypeId: String!
    deposit: Float!
    signatoryName: String
    signatorySurname: String
    signatoryPosition: String
}

input PersonalDataInputImport {
    name: String
    ico: String
    dic: String
    address1: AddressInputImport
    address2: AddressInputImport
    birthDate: Date
    email: String
    phone: String
    bankAccountNumber: String
    bankCode: String
    depositPaymentTypeId: String
    deposit: Float
    signatoryName: String
    signatorySurname: String
    signatoryPosition: String
}

input SupplyPointInputImport {
    id: ID
    supplierId: ID
    name: String
    address: AddressInputImport
    supplyPointPowerAttributes: SupplyPointInputPowerAttributesImport
    supplyPointGasAttributes: SupplyPointInputGasAttributesImport
    expirationDate: Date
    subjectTypeId: String
    contractEndTypeId: String
    timeToContractEnd: Int
    timeToContractEndPeriodId: String
    personalData: PersonalDataInputImport
    importPricePerKwPowerVT: Float
    importPricePerKwPowerNT: Float
    importPricePerKwGas: Float
    importPriceTotalPerYear: Float
    importPermanentMonthyPay: Float
}

type SupplyPointImportResponse {
    id: ID
    supplierId: ID
    name: String
    address: AddressInputImportResponse
    supplyPointPowerAttributes: SupplyPointInputPowerAttributesImportResponse
    supplyPointGasAttributes: SupplyPointInputGasAttributesImportResponse
    expirationDate: Date
    subjectTypeId: String
    contractEndTypeId: String
    timeToContractEnd: Int
    timeToContractEndPeriodId: String
    personalData: PersonalDataInputImportResponse
    askForOfferId: ID
}


type PersonalDataInputImportResponse {
    name: String
    ico: String
    dic: String
    address1: AddressInputImportResponse
    address2: AddressInputImportResponse
    birthDate: Date
    email: String
    phone: String
    bankAccountNumber: String
    bankCode: String
    depositPaymentTypeId: String
    deposit: Float
    signatoryName: String
    signatorySurname: String
    signatoryPosition: String
}

type SupplyPointInputGasAttributesImportResponse {
    eic: String
    annualConsumption: Float
    annualConsumptionUnit: String
}

type SupplyPointInputPowerAttributesImportResponse {
    ean: String
    circuitBreakerId: String
    phasesId: String
    distributionRateId: String
    annualConsumptionNT: Float
    annualConsumptionNTUnit: String
    annualConsumptionVT: Float
    annualConsumptionVTUnit: String
}

type AddressInputImportResponse {
    region: String
    street: String
    orientationNumber: String
    descriptiveNumber: String
    city: String
    postCode: String
}


type PersonalData {
    name: String
    ico: String
    dic: String
    address1: Address
    address2: Address
    birthDate: Date
    email: String
    phone: String
    bankAccountNumber: String
    bankCode: String
    depositPaymentType: CodelistItem
    deposit: Float
    signatoryName: String
    signatorySurname: String
    signatoryPosition: String
}

type Contract {
    contractId: ID!
    contractStatus: ContractStatus
    deliveryFrom: Date
    deliveryTo: Date
    offer: Offer
    personalData: PersonalData
    offerValidity: Boolean
    prolong: Boolean
}

type ContractResponseDto {
    contractId: ID
    offer: Offer
    supplyPointId: ID
    contractStatus: ContractStatus
    deliveryFrom: Date
    deliveryTo: Date
    expirationDate: Date
    signDate: Date
    prolong: Boolean
    personalData: PersonalData
    offerValidity: Boolean
    previousContractId: ID
    nextContractId: ID
    isNextContractConcluded: Boolean
}

type ContractWithNameAndSupplyPointEan {
    contract: ContractResponseDto!
    name: String!
    identificationNumber: String!
}

type PaginatedContractsWithNameAndSupplyPointEan {
    page: [ContractWithNameAndSupplyPointEan!]!
    totalRecords: Int!
}

type PaginatedAskForOffer {
    page: [AskForOfferResponse!]!
    totalRecords: Int!
}

type AskForOfferResponse {
    createdAt: Date,
    status: AskForOfferStatus,
    email: String,
    files: [UploadFileResponse],
    id: ID
}

type UploadFileResponse {
    id: ID
    fileName: String
}

input ContractsBasedOnOffersFilter {
    offerId: ID
    supplierId: ID
    signDateFrom: Date
    signDateTo: Date
    commodityType: CommodityType
    pagination: Pagination
}

input AskForOfferFilter {
    statuses: [AskForOfferStatus]
    pagination: Pagination
}

enum AskForOfferStatus {
    NEW,
    IN_PROGRESS,
    PROCESSED,
    DELETED
}

input Pagination {
    first: Int!
    offset: Int!
}

enum ContractStatus {
    CANCELED
    NOT_CONCLUDED
    WAITING_FOR_PAYMENT
    CONCLUDED
    TO_BE_CANCELED
}

enum PasswordDestination{
    EMAIL,
    PHONE
}

enum LandingPage{
    NEW_SUPPLY_POINT,
    DASHBOARD,
    WAITING_FOR_PAYMENT,
    OFFERS
}

type LoginResponse{
    token: String!
    landingPage: LandingPage!
}
input QRCodeSetting {
    width: Int
    height: Int
    margin: Int
    foregroundColor: String
    backgroundColor: String
}
type Payment {
    accountNumber: BankAccount!
    variableSymbol: VariableSymbol!
    amount: Float!
    currency: Currency!
    dueDate: Date!
    msg: String!
    encodedQrCode: String!
}
type Currency {
    currencyCode: String!
}
type VariableSymbol {
    value: String!
}
type BankAccount {
    accountPrefix: String
    accountNumber: String!
    bankCode: String!
    iban: String
}

type SupplyPointStatistic {
    gasCount: Int!
    powerCount: Int!
    showDeliveryCount: Int!
    notConcludedCount: Int!
    gasAnnualConsumptionSum: Float!
    powerAnnualConsumptionSum: Float!
    showDeliveryItems: [SupplyPointStatisticView!]
    notConcludedItems: [SupplyPointStatisticView!]
    concludedCount: Int!
    concludedItems: [SupplyPointStatisticView!]
}

type SupplyPointStatisticView {
    id: ID!
    name: String
    commodityType: CommodityType
    progressStatus: ProgressStatus!
}

type SupplyPointGlobalStatistic {
    gasOfferCount: Int!
    powerOfferCount: Int!
    gasDeliveryCount: Int!
    powerDeliveryCount: Int!
    totalPossibleDeliveryCountGas: Int!
    totalPossibleDeliveryCountPower: Int!
}

input UserDetailInput {
    userName: String!
    firstName: String!
    lastName: String!
    phoneNumber: String!
}


input ContractBasedOnSupplyPointFilter {
    supplyPointId: ID!,
    contractStatus: ContractStatus!
}

# The Root Query for the application
type Query {
    getCodelistByType(type: String!, locale: String): [CodelistItem]!
    findAllSuppliers(commodityType: CommodityType): [Supplier]!
    findCodelistsByTypes(types: [String]!, locale: String): [CodelistMap]!
    findSupplierDocumentsByComodity(
        supplierId: ID
        commodityType: CommodityType
    ): [SupplierSampleDocument]!
    getSupplyPoint(supplyPointId: ID!, contractId: ID): SupplyPoint
    findSupplyPoints(identificationNumber: String): [SupplyPoint]
    findSupplierOffers: [Offer]
    findSupplyPointOffers(identificationNumber: String!): [Offer]
    getPersonalData(contractId: ID!): PersonalData
    getContractById(contractId: ID!): ContractResponseDto
    getContractTerms(contractId: ID!): ContractTerms
    findSupplyPointsByContractStatus(contractStatus: [ContractStatus]!, identificationNumber: String): [SupplyPoint]
    getPaymentInfo(contractId: ID!, setting: QRCodeSetting!): Payment
    computeAndGetSupplyPointStatistics: SupplyPointStatistic
    listSupplierContractsBasedOnOffers(filter: ContractsBasedOnOffersFilter): PaginatedContractsWithNameAndSupplyPointEan
    listAskForOffer(filter: AskForOfferFilter): PaginatedAskForOffer
    listContractsBasedOnSupplyPointAndStatus(filter: ContractBasedOnSupplyPointFilter!): [ContractResponseDto]!
    getPersonalDataImport(input: PersonalDataInputImport): ID
    findSupplyPointImports(askForOfferId: ID!): SupplyPoint
}



# The Root Mutation for the application
type Mutation {
    updatePowerSupplyPointWithContract(
        supplyPointId: ID!,
        supplyPointUpdate: SupplyPointUpdate
        attributes: SupplyPointUpdatePowerAttributes
    ): ID
    updateGasSupplyPointWithContract(
        supplyPointId: ID!
        supplyPointUpdate: SupplyPointUpdate
        attributes: SupplyPointUpdateGasAttributes
    ): ID
    createGasSupplyPoint(
        supplyPoint: SupplyPointInput!
        gasAttributes: SupplyPointInputGasAttributes!
    ): ID
    createPowerSupplyPoint(
        supplyPoint: SupplyPointInput!
        powerAttributes: SupplyPointInputPowerAttributes!
    ): ID
    createSupplyPointImport(
        askForOfferId: ID!
        supplyPoint: SupplyPointInputImport!
    ): ID

    updateGasSupplyPoint(
        supplyPointId: ID!
        supplyPoint: SupplyPointInput!
        gasAttributes: SupplyPointInputGasAttributes!
    ): ID
    updatePowerSupplyPoint(
        supplyPointId: ID!
        supplyPoint: SupplyPointInput!
        powerAttributes: SupplyPointInputPowerAttributes!
    ): ID
    deleteUnfinishedSupplyPoint(
        supplyPointId: ID!
    ): Boolean,
    makeRegistration(
        email: String!
        termsOfConditionsApproved: Boolean!
        preregistration: Boolean = false
    ): Boolean
    makeUnregistration(smsCode: String): Boolean
    savePowerOffer(
        offer: OfferInput!
        powerAttributes: OfferInputPowerAttributes!
    ): Offer
    saveGasOffer(
        offer: OfferInput!
        gasAttributes: OfferInputGasAttributes!
    ): Offer
    updatePowerOffer(
        offerId: ID!
        offer: OfferInput!
        powerAttributes: OfferInputPowerAttributes!
    ): Offer
    updateGasOffer(
        offerId: ID!
        offer: OfferInput!
        gasAttributes: OfferInputGasAttributes!
    ): Offer
    deleteOffer(offerId: ID!): ID
    savePersonalData(contractId: ID!, personalData: PersonalDataInput!): Boolean
    updatePersonalData(contractId: ID!, personalData: PersonalDataInput!): Boolean
    deletePersonalData(contractId: ID!): Boolean
    saveContract(offerId: ID!, supplyPointId: ID!): ID
    concludeContract(contractId: ID!): Boolean
    unsetContractProlongation(contractId: ID!, smsCode: String!): Boolean
    signContract(contractId: ID!, smsCode: String): Boolean
    sendContractConfirmationSms(contractId: ID!): Boolean
    sendConfirmUnsetContractProlongationSms: Boolean
    sendUnregisterSms: Boolean
    sendChangePhoneNumberSms(phoneNumber: String!): Boolean
    resetPassword(login: String!): PasswordDestination
    changePassword(oldPassword: String!, newPassword: String!): LoginResponse
    deleteSignedContract(contractId: ID!, smsConfirmationCode: String!, contractDeleteReason: ContractDeleteReason!): Boolean
    deleteSelectedOfferFromContract(contractId: ID!): Boolean
    updateUserProfile(userDetail: UserDetailInput!, smsCode: String): Boolean
    confirmFirstContractView: Boolean
    deleteAskForOffer(askForOfferId: ID): ID
    finalizeAskForOffer(askForOfferId: ID): ID
}
