// Core component import
@import 'src/assets/scss/01_base/base.scss';

// Component variables
@import '../field/field.component.variables.scss';

// Component variables
@import 'select.component.variables.scss';


.ng-select-custom {
	max-width: $input-width;
	padding-bottom: 0;
	margin-bottom: ( $spacer * 2 );

	.ng-select-label {
		margin-bottom: ( $spacer / 4 );
		font-size: $input-font-size;
		cursor: pointer;
	}

	.ng-select {
		width: 100%;
	}

	.ng-select,
	.ng-select-opened {
		&.ng-select-focused .ng-select-container {
			&,
			&:hover {
				&::after {
					background-color: $input-focus-border-color;
				}
			}
		}
	}

	&.form-group {
		.ng-select {
			padding-bottom: 0;
		}

		.ng-select-container {
			height: $input-height;
			min-height: auto;
			background-color: $input-bg;
			border-radius: $input-border-radius;
			cursor: pointer;

			&::after {
				left: 0;
				bottom: 0;
				height: $input-border-width;
				background-color: $input-border-color;
				border: 0;
			}

			&:hover {
				&::after {
					background-color: $input-border-color-interactive;
				}

				.ng-arrow-wrapper,
				.ng-clear-wrapper {
					color: $input-color;
				}
			}

			.ng-placeholder,
			.ng-value,
			.ng-input > input {
				line-height: ( $input-height - ( $input-padding-y * 2 ) - $input-border-width );
			}

			.ng-value-container {
				.ng-input {
					top: 0;
					height: $input-height;
					padding: $input-padding-y $input-padding-x ( $input-padding-y + $input-border-width );
				}

				.ng-input > input {
					padding: 0;
					cursor: pointer;
				}
			}

			&,
			&.ng-select-focused {
				.ng-value-container {
					align-items: center;
					height: $input-height;
					padding: $input-padding-y $input-padding-x ( $input-padding-y + $input-border-width );
					border: none;
				}

				.ng-value-container .ng-placeholder {
					left: 0;
					padding: 0 $spacer;
					color: $input-color;
					transform: none;
					transition: none;
				}
			}

			.ng-arrow-wrapper,
			.ng-clear-wrapper {
				@include absolute-center(true, false);
				color: $input-border-color;

				&::before {
					@include icon;
					display: block;
				}
			}

			.ng-arrow-wrapper {
				width: $select-arrow-size;
				height: $select-arrow-size;
				right: $input-padding-x;
				bottom: auto;

				&::before {
					content: '\e916';
					font-size: $select-arrow-size;
				}
			}

			.ng-clear-wrapper {
				&::before {
					content: '\e91b';
					font-size: $select-clear-size;
				}
			}
		}

		.ng-value,
		.ng-placeholder,
		.ng-input,
		.ng-option {
			color: $input-color;
			font-size: $input-font-size;
		}

		.ng-clear-wrapper {
			right: ( ( $spacer * 1.5 ) + $select-arrow-size );
			width: $select-clear-size;
			height: $select-clear-size;

			&:hover {
				&::before {
					color: $danger;
				}
			}
		}

		.ng-select.ng-select-filtered,
		.ng-select .ng-has-value {
			.ng-placeholder {
				display: none;
			}
		}

		.ng-select-opened .ng-select-container {
			.ng-arrow-wrapper,
			.ng-clear-wrapper {
				color: $input-color;
			}

			.ng-arrow-wrapper::before {
				transform: rotate(180deg);
			}
		}

		.ng-arrow-wrapper .ng-arrow,
		.ng-clear-wrapper .ng-clear {
			display: none;
		}

		.ng-dropdown-panel {
			top: calc(100% + 10px);
			box-shadow: none;
		}

		.ng-dropdown-panel-items {
			padding: ( $spacer / 2.5 ) 0;
			max-height: $select-dropdown-panel-height;
			background-color: $input-bg;
			border-radius: $input-border-radius;
			box-shadow: 0 0 10px 0 rgba($black, .09);

			.ng-option {
				.highlighted {
					color: $input-color;
					font-weight: 400;
					text-decoration: none;
				}

				&.ng-option-selected .highlighted {
					color: $white;
				}
			}
		}

		.ng-select-filtered {
			.ng-option {
				color: $gray-100;
			}
		}

		.ng-option {
			&.ng-option-selected {
				background-color: $font-text;
				color: $white;

				&.ng-option-marked,
				&:hover {
					background-color: lighten($font-text, 5%);
				}
			}

			&.ng-option-marked,
			&:hover {
				background-color: darken($input-bg, 4%);
			}
		}

		.ng-option-disabled {
			cursor: default;
			pointer-events: none;
		}
	}

	.is-invalid ~ .invalid-feedback {
		display: block;
	}

	// Error state
	.is-invalid {
		&,
		&.ng-select-focused {
			.ng-select-container {
				&::after {
					background-color: $danger;
				}
			}

			.ng-select-container:hover {
				&::after {
					background-color: $input-color-interactive-invalid;
				}
			}
		}
	}
}
